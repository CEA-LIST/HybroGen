/* Autogenerated C file */
/* Generation date / time : 2023-05-10 17:29:07.103820 */
#ifndef H2_TILE_CXRAM_H
#define H2_TILE_CXRAM_H
#define MAIN_FILE
/* Autogenerated CXRAM configuration from ISA-3.1/csram-v3.1.json */
#include <stdint.h>

#ifndef QEMU_TARGET
#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include "string_lib.h"
#include "helper.h"
#include "global.h"

/* Memory base address */
#define CXRAM_BASE_ADDR (LIOT_CSRAM_REGS) /* Memory base adress */
#define CXRAM_IMC_ADDR  (LIOT_CSRAM_RAM_REG) /* NMC base adress (with PUF zone offset if exist) */
/* Memory line size in byte */
#define CXRAM_BASE_SIZE (LIOT_CSRAM_PUF_SIZE + LIOT_CSRAM_PUF_SIZE) /* All Memory size in byte */
#define CXRAM_IMC_SIZE  (LIOT_CSRAM_RAM_SIZE) /* NMC size in byte (witout PUF zone if exist) */

#else /* QEMU_TARGET */
/* Memory base address */
#define CXRAM_BASE_ADDR (0x10000000) 
#define CXRAM_IMC_ADDR  0x80000000 /* Dummy storage to avoid seg fault during sw */
/* Memory line size in byte */
#define CXRAM_IMC_SIZE  0x04000000
#define CXRAM_BASE_SIZE ((2<<14)*16) /* All Memory size in byte */

#endif /* QEMU_TARGET */

// #include "csram_utils.h"

/* Vector len in bytes */
#define CXRAM_VECLEN (16)

/* Type definition */
typedef  union {
  int8_t            i8[CXRAM_VECLEN];
  int16_t           i16[CXRAM_VECLEN/2];
  int32_t           i32[CXRAM_VECLEN/4];
  int64_t           i64[CXRAM_VECLEN/8];
} h2_cxram_line_t;
typedef h2_cxram_line_t (*h2_cxram_array_t);
/* Tile instance */
h2_cxram_array_t h2_cxram_tiles;
#endif
/* End of generated file h2-tile-cxram.h */