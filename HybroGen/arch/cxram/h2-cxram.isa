# Autogenerated ISA file
# Auto generated ISA CXRAM file definition */
# Instruction format definition    ISA-2.2/csram-isa-v2.2.json 
# Instruction definition based on  ISA-2.2/csram-opcodes-v2.2.csv 
# CXRAM configuration defined with ISA-2.2/csram-v2.2.json 
# Generation date/time 2022-04-25 18:05:37.113419 
ARCH CXRAM 64
# Copy a Line into another
100000 11000000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 copymm copy a0 a1 i0
# Copy a Line into another
100000 11000000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 copymr copy a0 a1 i0
# Copy a Line into another
100000 11000000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 copyrm copy a0 a1 i0
# Copy a Line into another
100000 11000000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 copyrr copy a0 a1 i0
# Horizontal 32-bit words swap
100000 10000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 hswap32mm hswap a0 a1 i0
# Horizontal 32-bit words swap
100000 10000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 hswap32mr hswap a0 a1 i0
# Horizontal 32-bit words swap
100000 10000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 hswap32rm hswap a0 a1 i0
# Horizontal 32-bit words swap
100000 10000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 hswap32rr hswap a0 a1 i0
# Horizontal 64-bit words swap
100000 11000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 2 64 hswap64mm hswap a0 a1 i0
# Horizontal 64-bit words swap
100000 11000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 2 64 hswap64mr hswap a0 a1 i0
# Horizontal 64-bit words swap
100000 11000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 2 64 hswap64rm hswap a0 a1 i0
# Horizontal 64-bit words swap
100000 11000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 2 64 hswap64rr hswap a0 a1 i0
# Copy a PUF or PP line into a PP or a normal memory line
100000 11000010 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 copyPUFmm copyPUF a0 a1 i0
# Copy a PUF or PP line into a PP or a normal memory line
100000 11000010 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 copyPUFmr copyPUF a0 a1 i0
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8mmm copyeq 
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8mmr copyeq 
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8mrm copyeq 
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8mrr copyeq 
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8rmm copyeq 
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8rmr copyeq 
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8rrm copyeq 
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8rrr copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16mmm copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16mmr copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16mrm copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16mrr copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16rmm copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16rmr copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16rrm copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16rrr copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32mmm copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32mmr copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32mrm copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32mrr copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32rmm copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32rmr copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32rrm copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32rrr copyeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8mmm copygeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8mmr copygeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8mrm copygeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8mrr copygeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8rmm copygeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8rmr copygeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8rrm copygeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8rrr copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16mmm copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16mmr copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16mrm copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16mrr copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16rmm copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16rmr copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16rrm copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16rrr copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32mmm copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32mmr copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32mrm copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32mrr copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32rmm copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32rmr copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32rrm copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32rrr copygeq 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8mmm copygt 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8mmr copygt 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8mrm copygt 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8mrr copygt 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8rmm copygt 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8rmr copygt 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8rrm copygt 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8rrr copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16mmm copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16mmr copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16mrm copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16mrr copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16rmm copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16rmr copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16rrm copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16rrr copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32mmm copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32mmr copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32mrm copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32mrr copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32rmm copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32rmr copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32rrm copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32rrr copygt 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8mmm copyleq 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8mmr copyleq 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8mrm copyleq 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8mrr copyleq 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8rmm copyleq 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8rmr copyleq 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8rrm copyleq 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8rrr copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16mmm copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16mmr copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16mrm copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16mrr copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16rmm copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16rmr copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16rrm copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16rrr copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32mmm copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32mmr copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32mrm copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32mrr copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32rmm copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32rmr copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32rrm copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32rrr copyleq 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8mmm copylt 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8mmr copylt 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8mrm copylt 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8mrr copylt 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8rmm copylt 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8rmr copylt 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8rrm copylt 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8rrr copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16mmm copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16mmr copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16mrm copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16mrr copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16rmm copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16rmr copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16rrm copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16rrr copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32mmm copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32mmr copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32mrm copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32mrr copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32rmm copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32rmr copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32rrm copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32rrr copylt 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8mmm copyneq 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8mmr copyneq 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8mrm copyneq 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8mrr copyneq 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8rmm copyneq 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8rmr copyneq 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8rrm copyneq 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8rrr copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16mmm copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16mmr copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16mrm copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16mrr copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16rmm copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16rmr copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16rrm copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16rrr copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32mmm copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32mmr copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32mrm copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32mrr copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32rmm copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32rmr copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32rrm copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32rrr copyneq 
# Broadcast 8-bit value to the whole Line
100000 00010000 a0[15:0] 00 i0[31:0]  | cxram i 16 8 bcast8m bcast  a0 i0
# Broadcast 8-bit value to the whole Line
100000 00010000 a0[15:0] 00 i0[31:0]  | cxram i 16 8 bcast8r bcast  a0 i0
# Broadcast 16-bit value to the whole Line
100000 01010000 a0[15:0] 00 i0[31:0]  | cxram i 8 16 bcast16m bcast  a0 i0
# Broadcast 16-bit value to the whole Line
100000 01010000 a0[15:0] 00 i0[31:0]  | cxram i 8 16 bcast16r bcast  a0 i0
# Broadcast 32-bit value to the whole Line
100000 10010000 a0[15:0] 00 i0[31:0]  | cxram i 4 32 bcast32m bcast  a0 i0
# Broadcast 32-bit value to the whole Line
100000 10010000 a0[15:0] 00 i0[31:0]  | cxram i 4 32 bcast32r bcast  a0 i0
# NOP instruction
100000 11010001 a0[15:0] 00 i0[31:0]  | cxram i 1 128 nopr nop  a0 i0
# Initialize the desired PUF/PP zone
100000 11010010 a0[15:0] 00 i0[31:0]  | cxram i 1 128 SetPUFm SetPUF  a0 i0
# Generate a cryptologic key from the desired PUF zone
100000 11010011 a0[15:0] 00 i0[31:0]  | cxram i 1 128 KeyGenm KeyGen  a0 i0
# Shift Left Logical Immediate
100000 00100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 slli8mm slli a0 a1 i0
# Shift Left Logical Immediate
100000 00100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 slli8mr slli a0 a1 i0
# Shift Left Logical Immediate
100000 00100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 slli8rm slli a0 a1 i0
# Shift Left Logical Immediate
100000 00100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 slli8rr slli a0 a1 i0
# Shift Left Logical Immediate
100000 01100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 slli16mm slli a0 a1 i0
# Shift Left Logical Immediate
100000 01100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 slli16mr slli a0 a1 i0
# Shift Left Logical Immediate
100000 01100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 slli16rm slli a0 a1 i0
# Shift Left Logical Immediate
100000 01100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 slli16rr slli a0 a1 i0
# Shift Left Logical Immediate
100000 10100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 slli32mm slli a0 a1 i0
# Shift Left Logical Immediate
100000 10100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 slli32mr slli a0 a1 i0
# Shift Left Logical Immediate
100000 10100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 slli32rm slli a0 a1 i0
# Shift Left Logical Immediate
100000 10100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 slli32rr slli a0 a1 i0
# Shift Left Logical Immediate
100000 11100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 sllimm slli a0 a1 i0
# Shift Left Logical Immediate
100000 11100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 sllimr slli a0 a1 i0
# Shift Left Logical Immediate
100000 11100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 sllirm slli a0 a1 i0
# Shift Left Logical Immediate
100000 11100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 sllirr slli a0 a1 i0
# Shift Right Logical Immediate
100000 00100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 srli8mm srli a0 a1 i0
# Shift Right Logical Immediate
100000 00100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 srli8mr srli a0 a1 i0
# Shift Right Logical Immediate
100000 00100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 srli8rm srli a0 a1 i0
# Shift Right Logical Immediate
100000 00100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 srli8rr srli a0 a1 i0
# Shift Right Logical Immediate
100000 01100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 srli16mm srli a0 a1 i0
# Shift Right Logical Immediate
100000 01100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 srli16mr srli a0 a1 i0
# Shift Right Logical Immediate
100000 01100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 srli16rm srli a0 a1 i0
# Shift Right Logical Immediate
100000 01100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 srli16rr srli a0 a1 i0
# Shift Right Logical Immediate
100000 10100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 srli32mm srli a0 a1 i0
# Shift Right Logical Immediate
100000 10100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 srli32mr srli a0 a1 i0
# Shift Right Logical Immediate
100000 10100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 srli32rm srli a0 a1 i0
# Shift Right Logical Immediate
100000 10100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 srli32rr srli a0 a1 i0
# Shift Right Logical Immediate
100000 11100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 srlimm srli a0 a1 i0
# Shift Right Logical Immediate
100000 11100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 srlimr srli a0 a1 i0
# Shift Right Logical Immediate
100000 11100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 srlirm srli a0 a1 i0
# Shift Right Logical Immediate
100000 11100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 srlirr srli a0 a1 i0
# One's complement negation
100000 11100010 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 notmm not a0 a1 i0
# One's complement negation
100000 11100010 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 notmr not a0 a1 i0
# One's complement negation
100000 11100010 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 notrm not a0 a1 i0
# One's complement negation
100000 11100010 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 notrr not a0 a1 i0
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andmmm and 
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andmmr and 
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andmrm and 
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andmrr and 
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andrmm and 
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andrmr and 
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andrrm and 
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 andrrr and 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 ormmm or 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 ormmr or 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 ormrm or 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 ormrr or 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 orrmm or 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 orrmr or 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 orrrm or 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 orrrr or 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xormmm xor 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xormmr xor 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xormrm xor 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xormrr xor 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xorrmm xor 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xorrmr xor 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xorrrm xor 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xorrrr xor 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandmmm nand 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandmmr nand 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandmrm nand 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandmrr nand 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandrmm nand 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandrmr nand 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandrrm nand 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nandrrr nand 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 normmm nor 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 normmr nor 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 normrm nor 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 normrr nor 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 norrmm nor 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 norrmr nor 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 norrrm nor 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 norrrr nor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnormmm xnor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnormmr xnor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnormrm xnor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnormrr xnor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnorrmm xnor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnorrmr xnor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnorrrm xnor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnorrrr xnor 
# Arithmetic absolute value
100000 00110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 abs8mm abs a0 a1 i0
# Arithmetic absolute value
100000 00110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 abs8mr abs a0 a1 i0
# Arithmetic absolute value
100000 00110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 abs8rm abs a0 a1 i0
# Arithmetic absolute value
100000 00110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 abs8rr abs a0 a1 i0
# Arithmetic absolute value
100000 01110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 abs16mm abs a0 a1 i0
# Arithmetic absolute value
100000 01110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 abs16mr abs a0 a1 i0
# Arithmetic absolute value
100000 01110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 abs16rm abs a0 a1 i0
# Arithmetic absolute value
100000 01110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 abs16rr abs a0 a1 i0
# Arithmetic absolute value
100000 10110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 abs32mm abs a0 a1 i0
# Arithmetic absolute value
100000 10110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 abs32mr abs a0 a1 i0
# Arithmetic absolute value
100000 10110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 abs32rm abs a0 a1 i0
# Arithmetic absolute value
100000 10110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 abs32rr abs a0 a1 i0
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8mmm add 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8mmr add 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8mrm add 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8mrr add 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8rmm add 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8rmr add 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8rrm add 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8rrr add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16mmm add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16mmr add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16mrm add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16mrr add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16rmm add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16rmr add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16rrm add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16rrr add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32mmm add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32mmr add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32mrm add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32mrr add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32rmm add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32rmr add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32rrm add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32rrr add 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8mmm sub 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8mmr sub 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8mrm sub 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8mrr sub 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8rmm sub 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8rmr sub 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8rrm sub 
# Arithmetic substraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8rrr sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16mmm sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16mmr sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16mrm sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16mrr sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16rmm sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16rmr sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16rrm sub 
# Arithmetic substraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16rrr sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32mmm sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32mmr sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32mrm sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32mrr sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32rmm sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32rmr sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32rrm sub 
# Arithmetic substraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32rrr sub 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8mmm cmp 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8mmr cmp 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8mrm cmp 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8mrr cmp 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8rmm cmp 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8rmr cmp 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8rrm cmp 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8rrr cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16mmm cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16mmr cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16mrm cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16mrr cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16rmm cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16rmr cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16rrm cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16rrr cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32mmm cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32mmr cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32mrm cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32mrr cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32rmm cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32rmr cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32rrm cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32rrr cmp 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8mmm mulhi 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8mmr mulhi 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8mrm mulhi 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8mrr mulhi 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8rmm mulhi 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8rmr mulhi 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8rrm mulhi 
# Arithmetic 8-bit integer multiply - Most significant bits
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mulhi8rrr mulhi 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8mmm mullo 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8mmr mullo 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8mrm mullo 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8mrr mullo 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8rmm mullo 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8rmr mullo 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8rrm mullo 
# Arithmetic 8-bit integer multiply - Less significant bits
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mullo8rrr mullo 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8mmm machi 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8mmr machi 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8mrm machi 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8mrr machi 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8rmm machi 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8rmr machi 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8rrm machi 
# Arithmetic 8-bit integer multiply-accumulate  - Most significant bits
100000 00111101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 machi8rrr machi 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8mmm maclo 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8mmr maclo 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8mrm maclo 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8mrr maclo 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8rmm maclo 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8rmr maclo 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8rrm maclo 
# Arithmetic 8-bit integer multiply-accumulate  - Less significant bits
100000 00111110 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 maclo8rrr maclo 
# End of file


# End of generated file 
