// -*- c -*-

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

typedef  void (*pifiii)(h2_cxram_line_t *, h2_cxram_line_t *, int len);

pifiii genPixelAccumulate(h2_insn_t * ptr)
{
#[
  int 32 1 subImage(int[] 16 8 a, int[] 16 8 res, int 32 1 len)
	{
	  int 32 1 i;
	  for (i = 0; i < len; i = i + 1)
		{
		  res[0] = res[0] + a[i];
		}
	}
]#
	return (pifiii) ptr;
}

void printVec(h2_cxram_line_t *vectorLine, int len, char * mesg)
{
  int i;
  printf ("%s :", mesg);
  for (i=0; i < len; i++)
	{
	  printf(" %06d", vectorLine->i16[i]);
	}
  printf ("\n");
}

void parseError (char * reference, char * inputLine)
{
  int len = strlen (reference);
  if (0 != strncmp (reference, inputLine, len))
    {
      printf("Pgm parse error, should be (%s) : %s\n", inputLine, inputLine);
      exit(-1);
    }
}

void readImage (char * fileName, h2_cxram_line_t *pixels)
{
  FILE * theFile;
  char inputLine[80], line[80];
  int height, width, lineNo, columnNo, pixel;
  theFile = fopen (fileName, "r");
  if (NULL == theFile)
	{
	  printf("Error for the file %s\n", fileName);
	  exit(-1);
	}
  fgets (inputLine, sizeof (line), theFile); // P2 format
  parseError("P2", inputLine);
  fgets (inputLine, sizeof (line), theFile); // Gimp comment
  parseError("# Created by GIMP version", inputLine);
  fgets (inputLine, sizeof (line), theFile);
  sscanf (inputLine, "%d %d\n", &height, &width); // LxH
  if ((height != 16) || (width != 16))
    {
      printf("Img size error (%dx%d) should be 16x16\n", width, height);
      exit(-1);
    }
  else
    {
      height = height * 2;
      width = width / 2;
    }
  fgets (inputLine, sizeof (line), theFile);
  sscanf (inputLine, "%d\n", &pixel); // Max grey value
  parseError("255", inputLine);
  printf("Read image file %s (%dx%d)\n", fileName, height, width);
  for (lineNo = 0; lineNo < height; lineNo ++)
    {
      for (columnNo = 0; columnNo < width; columnNo ++)
        {
          fgets (inputLine, sizeof (line), theFile);
          sscanf (inputLine, "%hd ", &pixels->i16[lineNo*width+columnNo]);
        }
    }
  fclose (theFile);
}

int main(int argc, char * argv[])
{
  int resultOK, lineNo, columnNo, testSum, totalSum;
  h2_insn_t * ptr;
  pifiii code;
  h2_cxram_line_t *in, *res;

  h2_init_cxram ();
  in =  &h2_cxram_tiles[0]; // Images src
  res = &h2_cxram_tiles[32]; //resulat
  if (argc < 2)
	{
	  printf("Not enough arguments (%d)\n", argc);
	  exit(-1);
	}
  readImage (argv[1], in);
  ptr = h2_malloc (1024);
  code = genPixelAccumulate(ptr);
  printf ("Code generated\n");
  code (in, res, 32);
  totalSum = 0;
  for (columnNo = 0; columnNo < 8; columnNo ++)
	totalSum += res->i16[columnNo];
  printf("CxRAM Sum of all pixels : %d\n", totalSum);
#if 0
  for (lineNo = 0; lineNo < 32; lineNo++)
    printVec (&h2_cxram_tiles[lineNo], CXRAM_VECLEN/2, "I");
  printf ("\n");
  printVec (res, CXRAM_VECLEN/2, "R");
  printf ("\n");
#endif

  resultOK = 0;
  testSum = 0;
  for (lineNo=0; lineNo < 32; lineNo++)
    {
      for (columnNo=0; columnNo < 8; columnNo++)
        {
          testSum = testSum + h2_cxram_tiles[lineNo].i16[columnNo];
        }
    }
  printf("C Sum of all pixels : %d\n", testSum);
  if (totalSum != testSum)
    {
      printf("Erreur addition\n");
      resultOK = -1;
    }
  return resultOK;
}
