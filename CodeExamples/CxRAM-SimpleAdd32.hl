// -*- c -*-

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

typedef  void (*pifiii)(h2_cxram_line_t *, h2_cxram_line_t*, h2_cxram_line_t*);

pifiii genAddImages(h2_insn_t * ptr)
{
#[
	int 32 4 add (int[] 32 4 a, int[] 32 4 b, int[] 32 4 res)
	{
		res[0] = a[0] + b[0];
	}
]#
	return (pifiii) ptr;
}
void printVec(h2_cxram_line_t * vectorLine, int len, char * mesg)
{
  int i;
  printf ("%s", mesg);
  for (i=0; i < len; i++)
	{
	  printf("  %05d", vectorLine->i32[i]);
	}
  printf ("\n");
}


int main(int argc, char * argv[])
{
  int i, resultOK;
	h2_insn_t * ptr;
	pifiii code;
	h2_cxram_line_t *in1, *in2, *res;

	h2_init_cxram ();
	in1 = &h2_cxram_tiles[0];
	in2 = &h2_cxram_tiles[1];
    res = &h2_cxram_tiles[2];

	if (argc < (CXRAM_VECLEN/4  + 1))
	{
	  printf("Not enough arguments (%d)\n", argc);
	  exit(-1);
	}
	for (i=0; i < CXRAM_VECLEN/4; i++)
	{
	  in1->i32[i] = atoi(argv[i+1]);
	  in2->i32[i] = 542;
	  res->i32[i] = 0;
	}
	ptr = h2_malloc (1024);
	code = genAddImages(ptr);
	code (in1, in2, res);
	printVec (in1, CXRAM_VECLEN/4, " ");
	printVec (in2, CXRAM_VECLEN/4, "+");
	printVec (res, CXRAM_VECLEN/4, "=");
	resultOK = 0;
	for (i=0; i < CXRAM_VECLEN / sizeof(in1->i32[0]); i++)
	  {
		if (res->i32[i] != (in1->i32[i] + in2->i32[i]))
		  resultOK = 1;
	  }
	return resultOK;
}
