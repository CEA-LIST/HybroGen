// -*- c -*-
#include <stdio.h>
#include <stdlib.h>

/* Pointer on function which take 1 pointer, an index and return int */
typedef  int (*pifii)(int *,   int);
typedef  int (*pifsi)(short *, int);
typedef  int (*pifci)(char *,  int);

/* C compilette prototype */
h2_insn_t * gen_Array_St(h2_insn_t * ptr, int wordSize)
{
  #[
  int 32 1 Array_St (int[] #(wordSize) 1 a, int 32 1 index)
    {
	  a[index] = 42;
      return 1;
    }
  ]#
  return (h2_insn_t *)ptr;
}

#define CHECK(ARRAY, INDICE, RESULT, LIMIT, VALUE)	\
  for (int i = 0; i < LIMIT; i++) 			\
	{ 									\
      if (INDICE == i) 					\
		{								\
		  if (ARRAY[INDICE] != VALUE)	\
			{ 							\
			  RESULT ++; 				\
			} 							\
		}		 						\
      else		 						\
		{		 						\
		  if (ARRAY[i] != i)		 	\
			{		 					\
			  RESULT ++;		 		\
			}		 					\
		}		 						\
	}

#define PRINTARRAY(MSG, ARRAY, LIMIT)\
  printf (MSG);						 \
  for (int i = 0; i < LIMIT; i++) 	\
	{ 								\
      printf("%4d ", ARRAY[i]);     \
	}								\
  printf ("\n");

int main(int argc, char * argv[])
{
  h2_insn_t * ptr;
  int in0, res, resultOK, loopLimit;
  pifii fPtr32;
  pifsi fPtr16;
  pifci fPtr8;

  int   a32[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  short a16[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  char   a8[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

  if (argc < 2)
    {
      printf("Give 1 values\n");
      exit(-1);
    }

  in0  = atoi (argv[1]);   // Get the users values in1
  printf ("Size of (bytes) 10 : INTs %d, SHORTs %d, CHARs %d\n", sizeof (a32), sizeof (a16), sizeof (a8));
  resultOK = 0;
  loopLimit = sizeof(a32) / sizeof (int);

  ptr  = h2_malloc (1024);  // Allocate memory for 1024 instructions
  fPtr32 = (pifii) gen_Array_St(ptr, 32); // Generate instructions
  res  = fPtr32(a32, in0);  // Call generated code
  CHECK (a32, in0, resultOK, loopLimit, 42);
  PRINTARRAY("32 bits : ", a32, loopLimit);

  ptr  = h2_malloc (1024);  // Allocate memory for 1024 instructions
  fPtr16 = (pifsi) gen_Array_St(ptr, 16); // Generate instructions
  res  = fPtr16(a16, in0);  // Call generated code
  PRINTARRAY("16 bits : ", a16, loopLimit);
  CHECK (a16, in0, resultOK, loopLimit, 42);

  ptr  = h2_malloc (1024);  // Allocate memory for 1024 instructions
  fPtr8 = (pifci) gen_Array_St(ptr, 8); // Generate instructions
  res  = fPtr8(a8, in0);  // Call generated code
  CHECK (a8, in0, resultOK, loopLimit, 42);
  PRINTARRAY("8  bits : ", a8, loopLimit);

  if (resultOK == 0)
	return 0;
  else
	return -1;
}
