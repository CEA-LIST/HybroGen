// -*- c -*-
#include <stdio.h>
#include <stdlib.h>

typedef  int   (*pifi)(int);

h2_insn_t * genAdd(h2_insn_t * ptr) /* C compilette prototype */
{
  #[
  int 32 1 LoopNest(int 32 1 len)
  {
	int 32 1 i, j, tmp;

    tmp = 0;
	for (i = 0; i < len; i = i + 1)
	  {
        for (j = 0; j < len; j = j + 1)
          {
            tmp = tmp + 10;
          }
        tmp = tmp + 1;
        for (j = 0; j < len; j = j + 1)
          {
            tmp = tmp + 11;
          }
        tmp = tmp + 1;
        for (j = 0; j < len; j = j + 1)
          {
            tmp = tmp + 1;
          }
        tmp = tmp + 1;
      }
	for (i = 0; i < len; i = i + 1)
	  {
        for (j = 0; j < len; j = j + 1)
          {
            tmp = tmp + 7;
          }
      }
    tmp = tmp + 1;
    return tmp;
  }

  ]#
 return (h2_insn_t *)ptr;
}
// Simple addition between variables which are
// 2 array of vectors composed of 16 values of 8 bits integer numbers
// static unrolling,

int main(int argc, char * argv[])
{
  h2_insn_t * ptr;
  int in0, resC, resD;
  pifi fPtr;

  in0 = atoi(argv[1]);
  ptr  = h2_malloc (1024);     		// Allocate memory for 1024 instructions
  fPtr = (pifi) genAdd (ptr); 	    // Generate instructions
  resD  = fPtr(in0);  	// Call generated code
  resC  = in0*(in0*10+1+in0*11+1+in0*1+1)+in0*7*in0+1,
  printf("Result C : %d Result D : %d\n", resC, resD);
  if (resD == resC)
	return 0;
  else
	return -1;
}
