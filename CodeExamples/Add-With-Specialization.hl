#include <stdio.h> // -*- c -*-
#include <stdlib.h>

typedef  int (*pifi)(int);

pifi genAdd(pifi ptr, int  b)
{
  #[
  int 32 1 add (int 32 1 a)
  {
    int 32 1 r;
    r =  a + #(b); // b values will be included in code generation
	// constant value should be in right position
    return r;
  }
  ]#
  return (pifi) ptr;
}

int main(int argc, char * argv[])
{
  int in0, in1, res;
  pifi fPtr;

  if (argc < 3)
    {
      printf("Give 2 values\n");
      exit(-1);
    }
  in0  = atoi (argv[1]);   // Get the users values in1 & in2
  in1  = atoi (argv[2]);
  fPtr  = (pifi) h2_malloc (1024);  // Allocate memory for 1024 instructions
  printf("// Compilette for simple addition between 1 variable with\n");
  printf("// code specialization on value = %d\n", in0);
  fPtr = genAdd (fPtr, in0); // Generate instructions
  res  = fPtr(in1);  // Call generated code
  printf("%d + %d = %d\n", in0, in1, res);
  if (res == (in0 + in1))
    return 0;
  else
    return -1;
}
